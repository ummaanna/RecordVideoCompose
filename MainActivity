package com.example.recordvideoccompose


import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Bundle
import android.provider.MediaStore
import android.util.Log
import android.widget.Toast
import android.widget.VideoView
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.material.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.example.recordvideoccompose.ui.theme.RecordVideocComposeTheme

class MainActivity : ComponentActivity() {

    private var shouldShowVideo: MutableState<Boolean> = mutableStateOf(false)
    var simpleVideoView: VideoView? = null
    var requestCode: Int = 0
    var resultCode: Int =0



    private val requesPermissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { isGranted ->
        if (isGranted) {
            Log.i("audio", "Permissão concedida")
            shouldShowVideo.value = true
        } else {
            Log.i("audio", "Permissão negada")
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            RecordVideocComposeTheme {
                PlayVideo()
            }
        }

        requestAudioPermission()

    }

    private fun requestAudioPermission() {
        when {
            ContextCompat.checkSelfPermission(
                this,
                Manifest.permission.CAMERA
            ) == PackageManager.PERMISSION_GRANTED -> {
                Log.i("video", "Permissão concedida")
                shouldShowVideo.value = true
            }

            ActivityCompat.shouldShowRequestPermissionRationale(
                this,
                Manifest.permission.CAMERA
            ) -> Log.i("video", "Exibir caixa de dialogo para permissões")

            else -> requesPermissionLauncher.launch(Manifest.permission.CAMERA)
        }
    }

    private fun recordVideo() {
        Intent(MediaStore.ACTION_VIDEO_CAPTURE).also { takeVideoIntent ->
            takeVideoIntent.resolveActivity(packageManager)?.also {
                startActivityForResult(takeVideoIntent, 1)
            }
        }
    }



    @Composable
    fun PlayVideo() {
        Column(
            Modifier.fillMaxSize(), verticalArrangement = Arrangement.Center,
            horizontalAlignment = Alignment.CenterHorizontally,
        ) {
            Image(
                painter = painterResource(id = R.drawable.ic_videocam),
                contentDescription = "icon",
                modifier = Modifier
                    .height(160.dp)
                    .width(160.dp)
                    .padding(1.dp)
                    .background(Color.LightGray)
            )
            Row {
                IconButton(onClick = {
                    Log.i("video", "gravar")
                    Toast.makeText(this@MainActivity, "Iniciar gravação", Toast.LENGTH_SHORT).show()
                    this@MainActivity.recordVideo()
                }, modifier = Modifier.size(100.dp)) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_record),
                        contentDescription = "iniciar gravação", tint = Color.Red

                    )
                }

            }
        }
    }
}


